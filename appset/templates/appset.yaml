apiVersion: argoproj.io/v1alpha1
kind: ApplicationSet
metadata:
  name: policystack
  namespace: openshift-gitops
spec:
  syncPolicy:
    preserveResourcesOnDeletion: true
  goTemplate: true
  goTemplateOptions: ["missingkey=error"]
  generators:
    - matrix:
        generators:
          - clusters:
              selector:
                matchExpressions:
                  - key: git.{{ .Values.baseDomain }}/revision
                    operator: Exists
          - git:
              repoURL: '{{ .Values.gitRepo }}'
              revision: '{{ "{{" }}index .metadata.labels "git.{{ .Values.baseDomain }}/revision"{{ "}}" }}'
              directories:
              - path: 'stack/*'
  template:
    metadata:
      name: '{{ "{{" }}.path.basenameNormalized{{ "}}" }}-{{ "{{"}}.name{{ "}}" }}'
    spec:
      project: default
      source:
        repoURL: '{{ .Values.gitRepo }}'
        targetRevision: '{{ "{{" }}index .metadata.labels "git.{{ .Values.baseDomain }}/revision"{{ "}}" }}'
        path: '{{ "{{" }}.path.path{{ "}}" }}'
      destination:
        server: 'https://kubernetes.default.svc'
        namespace: open-cluster-management
      syncPolicy:
        syncOptions:
        - RespectIgnoreDifferences=true
        automated:
          prune: true
          selfHeal: true
  templatePatch: |
    {{ "{{" }}- /* First pass: extract datacenter */{{ "}}" }}
    {{ "{{" }}- $datacenter := "" {{ "}}" }}
    {{ "{{" }}- range $key, $value := .metadata.labels {{ "}}" }}
      {{ "{{" }}- if hasPrefix "config.{{ .Values.baseDomain }}/datacenter." $key {{ "}}" }}
        {{ "{{" }}- $datacenter = $value {{ "}}" }}
      {{ "{{" }}- end {{ "}}" }}
    {{ "{{" }}- end {{ "}}" }}

    {{ "{{" }}- /* Second pass: extract environment */{{ "}}" }}
    {{ "{{" }}- $environment := "" {{ "}}" }}
    {{ "{{" }}- range $key, $value := .metadata.labels {{ "}}" }}
      {{ "{{" }}- if hasPrefix "config.{{ .Values.baseDomain }}/environment." $key {{ "}}" }}
        {{ "{{" }}- $environment = $value {{ "}}" }}
      {{ "{{" }}- end {{ "}}" }}
    {{ "{{" }}- end {{ "}}" }}
  
    {{ "{{" }}- if index .metadata.labels "local-cluster" {{ "}}" }}
    metadata:
      name: '{{ "{{" }}.path.basenameNormalized{{ "}}" }}-acm-{{ "{{" }} $datacenter {{ "}}" }}'
    {{ "{{" }}- end {{ "}}" }}
  
    spec:
      source:
        helm:
          ignoreMissingValueFiles: true
          valueFiles:
          - values.yaml
          - ../../values.yaml
          {{ "{{" }}- /* Store the cluster name for use in nested scopes */{{ "}}" }}
          {{ "{{" }}- $clusterName := .name {{ "}}" }}

          {{ "{{" }}- /* Organize labels by priority using a dictionary */{{ "}}" }}
          {{ "{{" }}- $priorityMap := dict {{ "}}" }}
          {{ "{{" }}- $multiValues := dict {{ "}}" }}

          {{ "{{" }}- /* Gather all config.{{ .Values.baseDomain }} labels */{{ "}}" }}
          {{ "{{" }}- range $key, $value := .metadata.labels {{ "}}" }}
            {{ "{{" }}- if hasPrefix "config.{{ .Values.baseDomain }}/" $key {{ "}}" }}
              {{ "{{" }}- /* Extract category and priority */{{ "}}" }}
              {{ "{{" }}- $keyParts := splitList "/" $key {{ "}}" }}
              {{ "{{" }}- if gt (len $keyParts) 1 {{ "}}" }}
                {{ "{{" }}- $categoryPriority := index $keyParts 1 {{ "}}" }}
                {{ "{{" }}- $dotParts := splitList "." $categoryPriority {{ "}}" }}
                {{ "{{" }}- if gt (len $dotParts) 1 {{ "}}" }}
                  {{ "{{" }}- $category := index $dotParts 0 {{ "}}" }}
                  {{ "{{" }}- $priorityStr := index $dotParts 1 {{ "}}" }}
                
                  {{ "{{" }}- /* Add to priority map */{{ "}}" }}
                  {{ "{{" }}- $paddedKey := printf "%05s-%s-%s" $priorityStr $category $value {{ "}}" }}
                  {{ "{{" }}- $_ := set $priorityMap $paddedKey (dict "category" $category "value" $value "key" $key) {{ "}}" }}
                
                  {{ "{{" }}- /* For multi-value support, append to a list if it exists or create a new one */{{ "}}" }}
                  {{ "{{" }}- if not (hasKey $multiValues $category) {{ "}}" }}
                    {{ "{{" }}- $_ := set $multiValues $category (list) {{ "}}" }}
                  {{ "{{" }}- end {{ "}}" }}
                  {{ "{{" }}- $existingValues := index $multiValues $category {{ "}}" }}
                  {{ "{{" }}- $_ := set $multiValues $category (append $existingValues $value) {{ "}}" }}
                
                  {{ "{{" }}- /* Update datacenter if found */{{ "}}" }}
                  {{ "{{" }}- if eq $category "datacenter" {{ "}}" }}
                    {{ "{{" }}- $datacenter = $value {{ "}}" }}
                  {{ "{{" }}- end {{ "}}" }}
                {{ "{{" }}- end {{ "}}" }}
              {{ "{{" }}- end {{ "}}" }}
            {{ "{{" }}- end {{ "}}" }}
          {{ "{{" }}- end {{ "}}" }}

          {{ "{{" }}- /* Get sorted keys */{{ "}}" }}
          {{ "{{" }}- $sortedKeys := keys $priorityMap | sortAlpha {{ "}}" }}
        
          {{ "{{" }}- /* Collect selected values for later use */{{ "}}" }}
          {{ "{{" }}- $selectedValues := dict {{ "}}" }}
          {{ "{{" }}- $matchSelectors := dict {{ "}}" }}

          {{ "{{" }}- /* Determine the filename based on local-cluster */{{ "}}" }}
          {{ "{{" }}- $filename := $clusterName {{ "}}" }}
          {{ "{{" }}- if index .metadata.labels "local-cluster" {{ "}}" }}
            {{ "{{" }}- $filename = printf "acm-%s" $datacenter {{ "}}" }}
          {{ "{{" }}- end {{ "}}" }}

          {{ "{{" }}- /* Process sorted labels */{{ "}}" }}
          {{ "{{" }}- range $sortKey := $sortedKeys {{ "}}" }}
            {{ "{{" }}- $label := index $priorityMap $sortKey {{ "}}" }}
            {{ "{{" }}- $category := $label.category {{ "}}" }}
            {{ "{{" }}- $value := $label.value {{ "}}" }}
            {{ "{{" }}- $key := $label.key {{ "}}" }}
          
            {{ "{{" }}- /* Store in match selectors */{{ "}}" }}
            {{ "{{" }}- $_ := set $matchSelectors $key (dict "key" $key "operator" "In" "values" (list $value)) {{ "}}" }}
          
            {{ "{{" }}- /* Store for selected values - last one wins for backward compatibility */{{ "}}" }}
            {{ "{{" }}- $_ := set $selectedValues $category $value {{ "}}" }}
          
            {{ "{{" }}- /* Pluralize the category */{{ "}}" }}
            {{ "{{" }}- $pluralCategory := printf "%ss" $category {{ "}}" }}
          
            {{ "{{" }}- /* Add value file */{{ "}}" }}
          - ../../values/{{ "{{" }} $pluralCategory {{ "}}" }}/{{ "{{" }} $value {{ "}}" }}.yaml
          {{ "{{" }}- end {{ "}}" }}

          {{ "{{" }}- /* Handle local-cluster special case */{{ "}}" }}
          {{ "{{" }}- if index .metadata.labels "local-cluster" {{ "}}" }}
          - ../../values/acm/acm-{{ "{{" }} $datacenter {{ "}}" }}.yaml
          - ../../values/clusters/acm-{{ "{{" }} $datacenter {{ "}}" }}.yaml
          {{ "{{" }}- else {{ "}}" }}
          - ../../values/clusters/{{ "{{" }} $clusterName {{ "}}" }}.yaml
          {{ "{{" }}- end {{ "}}" }}

          valuesObject:
            {{ "{{" }}- /* Include both single selected values for backward compatibility */{{ "}}" }}
            {{ "{{" }}- range $category, $value := $selectedValues {{ "}}" }}
            selected{{ "{{" }} title $category {{ "}}" }}: {{ "{{" }} $value {{ "}}" }}
            {{ "{{" }}- end {{ "}}" }}
          
            {{ "{{" }}- /* And add multi-value support */{{ "}}" }}
            {{ "{{" }}- range $category, $values := $multiValues {{ "}}" }}
            selected{{ "{{" }} title $category {{ "}}" }}Values:
              {{ "{{" }}- range $value := $values {{ "}}" }}
              - {{ "{{" }} $value {{ "}}" }}
              {{ "{{" }}- end {{ "}}" }}
            {{ "{{" }}- end {{ "}}" }}
          
            {{ "{{" }}- if index .metadata.labels "local-cluster" {{ "}}" }}
            selectedName: acm-{{ "{{" }} $datacenter {{ "}}" }}
            {{ "{{" }}- else {{ "}}" }}
            selectedName: {{ "{{" }} $clusterName {{ "}}" }}
            {{ "{{" }}- end {{ "}}" }}
            selectedId: {{ "{{" }} .metadata.labels.clusterID {{ "}}" }}
            {{ "{{" }}- if index .metadata.labels "env.{{ .Values.baseDomain }}/defaultstorageclass" {{ "}}" }}
            selectedDefaultStorageClass: {{ "{{" }} index .metadata.labels "env.{{ .Values.baseDomain }}/defaultstorageclass" {{ "}}" }}
            {{ "{{" }}- end {{ "}}" }}

            selector:
              matchExpressions:
                {{ "{{" }}- range $key, $expr := $matchSelectors {{ "}}" }}
                {{ "{{" }}- $safeKey := $key | replace "." "_" | replace "/" "_" | replace "-" "_" {{ "}}" }}
                {{ "{{" }} $safeKey {{ "}}" }}:
                  key: {{ "{{" }} $expr.key {{ "}}" }}
                  operator: {{ "{{" }} $expr.operator {{ "}}" }}
                  values:
                    - {{ "{{" }} index $expr.values 0 {{ "}}" }}
                {{ "{{" }}- end {{ "}}" }}
                name:
                  key: name
                  operator: In
                  values:
                    - {{ "{{" }} $clusterName {{ "}}" }}

